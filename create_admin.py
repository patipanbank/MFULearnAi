#!/usr/bin/env python3
"""
Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Admin User ‡πÉ‡∏´‡∏°‡πà
Usage: python create_admin.py
"""

import asyncio
import sys
import os
from getpass import getpass

# ‡πÄ‡∏û‡∏¥‡πà‡∏° backend directory ‡πÉ‡∏´‡πâ Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from lib.mongodb import connect_to_mongo, close_mongo_connection
from services.user_service import user_service
from models.user import UserRole

async def create_admin_interactive():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á admin user ‡πÅ‡∏ö‡∏ö interactive"""
    print("=== MFU Learn AI - Admin User Creation ===")
    print()
    
    # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å user
    username = input("Username: ").strip()
    if not username:
        print("‚ùå Username ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà")
        return False
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ username ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    existing_user = await user_service.find_admin_by_username(username)
    if existing_user:
        print(f"‚ùå Username '{username}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        return False
    
    password = getpass("Password: ").strip()
    if not password:
        print("‚ùå Password ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà")
        return False
    
    confirm_password = getpass("Confirm Password: ").strip()
    if password != confirm_password:
        print("‚ùå Password ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        return False
    
    email = input("Email: ").strip()
    if not email:
        print("‚ùå Email ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà")
        return False
    
    first_name = input("First Name: ").strip()
    if not first_name:
        print("‚ùå First Name ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà")
        return False
    
    last_name = input("Last Name: ").strip()
    if not last_name:
        print("‚ùå Last Name ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà")
        return False
    
    department = input("Department: ").strip()
    if not department:
        print("‚ùå Department ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà")
        return False
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á
    print("\n=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á ===")
    print(f"Username: {username}")
    print(f"Email: {email}")
    print(f"Name: {first_name} {last_name}")
    print(f"Department: {department}")
    print(f"Role: {UserRole.ADMIN}")
    print()
    
    confirm = input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Admin? (y/N): ").strip().lower()
    if confirm not in ['y', 'yes']:
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Admin")
        return False
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á admin user ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô create_admin method
        from lib.mongodb import get_database
        from utils.security import get_password_hash
        from datetime import datetime
        from bson import ObjectId
        
        db = get_database()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if await db.get_collection("users").find_one({"username": username}):
            print(f"‚ùå Username '{username}' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return False
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á admin document
        hashed_password = get_password_hash(password)
        admin_doc = {
            "_id": ObjectId(),
            "nameID": username,
            "username": username,
            "password": hashed_password,
            "email": email,
            "firstName": first_name,
            "lastName": last_name,
            "department": department,
            "role": UserRole.ADMIN,
            "groups": ['Admin'],
            "created": datetime.utcnow(),
            "updated": datetime.utcnow()
        }
        
        # Insert ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await db.get_collection("users").insert_one(admin_doc)
        
        print("\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"ID: {str(admin_doc['_id'])}")
        print(f"Username: {admin_doc['username']}")
        print(f"Email: {admin_doc['email']}")
        print(f"Name: {admin_doc['firstName']} {admin_doc['lastName']}")
        print(f"Department: {admin_doc['department']}")
        print(f"Role: {admin_doc['role']}")
        print(f"Created: {admin_doc['created']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return False

async def create_super_admin():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Super Admin ‡πÅ‡∏£‡∏Å (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ admin ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)"""
    print("=== ‡∏™‡∏£‡πâ‡∏≤‡∏á Super Admin ‡πÅ‡∏£‡∏Å ===")
    print("‚ö†Ô∏è  ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ admin ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    existing_admins = await user_service.get_all_admins()
    if existing_admins:
        print(f"‚ùå ‡∏°‡∏µ Admin ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß {len(existing_admins)} ‡∏Ñ‡∏ô")
        print("‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏ó‡∏ô")
        return False
    
    username = input("Super Admin Username: ").strip() or "superadmin"
    password = getpass("Super Admin Password: ").strip()
    if not password:
        password = "SuperAdmin123!"  # default password
        print(f"‡πÉ‡∏ä‡πâ password ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {password}")
    
    email = input("Super Admin Email: ").strip() or "superadmin@mfu.ac.th"
    
    try:
        from lib.mongodb import get_database
        from utils.security import get_password_hash
        from datetime import datetime
        from bson import ObjectId
        
        db = get_database()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Super Admin ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        super_admin_doc = {
            "_id": ObjectId(),
            "nameID": username,
            "username": username,
            "password": get_password_hash(password),
            "email": email,
            "firstName": "Super",
            "lastName": "Admin",
            "department": "IT",
            "role": UserRole.SUPER_ADMIN,
            "groups": ['SuperAdmin', 'Admin'],
            "created": datetime.utcnow(),
            "updated": datetime.utcnow()
        }
        
        await db.get_collection("users").insert_one(super_admin_doc)
        
        print("\n‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Super Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"Username: {username}")
        print(f"Password: {password}")
        print(f"Email: {email}")
        print(f"Role: {UserRole.SUPER_ADMIN}")
        print()
        print("‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô password ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        return False

async def list_admins():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ admin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("=== ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Admin ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===")
    
    try:
        admins = await user_service.get_all_admins()
        
        if not admins:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Admin ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        print(f"‡∏û‡∏ö Admin ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(admins)} ‡∏Ñ‡∏ô:")
        print()
        print(f"{'ID':<25} {'Username':<20} {'Name':<30} {'Department':<20} {'Role':<15}")
        print("-" * 110)
        
        for admin in admins:
            full_name = f"{admin.firstName or ''} {admin.lastName or ''}".strip()
            print(f"{admin.id:<25} {admin.username:<20} {full_name:<30} {admin.department or 'N/A':<20} {admin.role:<15}")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

async def main():
    """Main function"""
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await connect_to_mongo()
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        print()
        
        # ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
        while True:
            print("=== MFU Learn AI - Admin Management ===")
            print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin ‡πÉ‡∏´‡∏°‡πà")
            print("2. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Admin")
            print("3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Super Admin (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ admin)")
            print("4. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
            print()
            
            choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1-4): ").strip()
            
            if choice == "1":
                await create_admin_interactive()
            elif choice == "2":
                await list_admins()
            elif choice == "3":
                await create_super_admin()
            elif choice == "4":
                print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                break
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-4")
            
            print("\n" + "="*50 + "\n")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        return False
    
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await close_mongo_connection()
        print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == "__main__":
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô project directory
    if not os.path.exists("backend"):
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå root ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ")
        sys.exit(1)
    
    # ‡∏£‡∏±‡∏ô script
    asyncio.run(main()) 