services:
  db:
    image: mongo
    container_name: mfulearnai_db
    ports:
      - 27017:27017
    volumes:
      - data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=1234
    restart: always
    networks:
      - mfulearnai

  redis:
    image: redis:alpine
    container_name: mfulearnai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis:/data
    networks:
      - mfulearnai
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      # Override specific values that need to be different in Docker
      - MONGODB_URI=mongodb://root:1234@db:27017/mfu_chatbot?authSource=admin
      - CHROMA_URL=http://chroma:8000
      - REDIS_URL=redis://redis:6379
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - S3_BUCKET=uploads
      # All other environment variables will be loaded from .env file
    depends_on:
      - chroma
      - db
      - redis
    networks:
      - mfulearnai
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 1.1.1.1

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${FRONTEND_URL:-https://mfulearnai.mfu.ac.th}/api
        - VITE_WS_URL=wss://mfulearnai.mfu.ac.th/ws
    env_file:
      - .env
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - mfulearnai
    restart: unless-stopped

  nginx:
    build: 
      context: ./nginx
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      # Environment-specific nginx configuration
      - SERVER_NAME=${NGINX_SERVER_NAME:-localhost}
      - BACKEND_HOST=backend
      - BACKEND_PORT=5000
      - FRONTEND_HOST=frontend
      - FRONTEND_PORT=80
      - SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
      - SSL_KEY_PATH=/etc/nginx/ssl/key.pem
      - LOG_LEVEL=${NGINX_LOG_LEVEL:-warn}
      - CORS_ORIGIN=${NGINX_CORS_ORIGIN:-*}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 80:80
      - 443:443
    depends_on:
      - frontend
      - backend
    networks:
      - mfulearnai
    restart: unless-stopped

  chroma:
    image: chromadb/chroma
    container_name: chromadb
    ports:
      - "8000:8000"
    environment:
      - ANONYMIZED_TELEMETRY=False
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    volumes:
      - chroma:/chroma/chroma
    networks:
      - mfulearnai
    restart: unless-stopped

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MONGODB_URI=mongodb://root:1234@db:27017/mfu_chatbot?authSource=admin
      - CHROMA_URL=http://chroma:8000
      - REDIS_URL=redis://redis:6379
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - S3_BUCKET=uploads
    depends_on:
      - db
      - redis
      - chroma
    networks:
      - mfulearnai
    restart: unless-stopped
    command: >
      celery -A celery_app.celery worker -l info --concurrency=4

  minio:
    image: minio/minio
    container_name: mfulearnai_minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web console
    networks:
      - mfulearnai
    restart: unless-stopped

  bedrock-gateway:
    build:
      context: ./bedrock-api-gateway
      dockerfile: Dockerfile
    container_name: mfulearnai_bedrock_gateway
    env_file:
      - .env
    environment:
      # Bedrock Gateway specific environment variables
      - APP_ENV=${BEDROCK_APP_ENV:-production}
      - PORT=8000
      - LOG_LEVEL=${BEDROCK_LOG_LEVEL:-INFO}
      
      # AWS Configuration
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BEDROCK_MODEL_ID=${AWS_BEDROCK_MODEL_ID:-anthropic.claude-3-5-sonnet-20240620-v1:0}
      
      # API Gateway Configuration
      - API_KEYS=${BEDROCK_API_KEYS:-}
      - ALLOWED_ORIGINS=${BEDROCK_ALLOWED_ORIGINS:-*}
      - RATE_LIMIT_REQUESTS=${BEDROCK_RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${BEDROCK_RATE_LIMIT_WINDOW:-60}
      
      # Logging Configuration
      - LOG_REQUESTS=${BEDROCK_LOG_REQUESTS:-true}
      - LOG_RESPONSES=${BEDROCK_LOG_RESPONSES:-false}
      
      # Use existing services from root docker-compose
      - REDIS_URL=redis://redis:6379
      - MONGODB_URI=mongodb://root:1234@db:27017/bedrock_usage?authSource=admin
      
      # Security
      - SECRET_KEY=${BEDROCK_SECRET_KEY:-your-secret-key-change-in-production}
    depends_on:
      - db
      - redis
    networks:
      - mfulearnai
    ports:
      - "8001:8000"  # Changed to avoid conflict with ChromaDB
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - mfulearnai
    ports:
      - "9090:9090"
    restart: unless-stopped

  mongodb-exporter:
    image: percona/mongodb_exporter:0.39
    container_name: mongodb_exporter
    environment:
      - MONGODB_URI=mongodb://root:1234@db:27017/admin?authSource=admin
    networks:
      - mfulearnai
    ports:
      - "9216:9216"
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:10.4.2
    container_name: grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=changeme123
      - GF_INSTALL_PLUGINS=grafana-mongodb-datasource
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/provisioning/:/etc/grafana/provisioning/
    networks:
      - mfulearnai
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  data:
  redis:
  chroma:
  minio-data:
  grafana-storage:

networks:
  mfulearnai:
    driver: bridge