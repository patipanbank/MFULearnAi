import { create } from " zustand\; import { createRef, MutableRefObject } from \react\; export interface UIState { isLoading: boolean; isMobile: boolean; inputMessage: string; isImageGenerationMode: boolean; awaitingChatId: boolean; bottomRef: MutableRefObject<HTMLDivElement | null>; containerRef: MutableRefObject<HTMLDivElement | null>; showScrollButton: boolean; autoScrollEnabled: boolean; setIsLoading: (isLoading: boolean) => void; setIsMobile: (isMobile: boolean) => void; setInputMessage: (message: string) => void; setIsImageGenerationMode: (mode: boolean) => void; setAwaitingChatId: (awaiting: boolean) => void; setupScrollHandler: () => () => void; scrollToBottom: () => void; disableAutoScroll: () => void; enableAutoScroll: () => void; updateScrollPosition: () => void; initMobileDetection: () => void; } export const useUIStore = create<UIState>((set, get) => ({ isLoading: false, isMobile: false, inputMessage: \\, isImageGenerationMode: false, awaitingChatId: false, bottomRef: createRef<HTMLDivElement>(), containerRef: createRef<HTMLDivElement>(), showScrollButton: false, autoScrollEnabled: true, setIsLoading: (isLoading) => set({ isLoading }), setIsMobile: (isMobile) => set({ isMobile }), setInputMessage: (message) => set({ inputMessage: message }), setIsImageGenerationMode: (mode) => set({ isImageGenerationMode: mode }), setAwaitingChatId: (awaiting) => set({ awaitingChatId: awaiting }), setupScrollHandler: () => { const container = get().containerRef.current; if (!container) return () => {}; const isNearBottom = () => { const { scrollTop, scrollHeight, clientHeight } = container; const distanceFromBottom = scrollHeight - scrollTop - clientHeight; return distanceFromBottom < 150; }; const handleScroll = () => { const nearBottom = isNearBottom(); set({ showScrollButton: !nearBottom }); if (nearBottom && !get().autoScrollEnabled) { set({ autoScrollEnabled: true }); } if (!nearBottom && get().autoScrollEnabled) { set({ autoScrollEnabled: false }); } }; container.addEventListener(\scroll\, handleScroll, { passive: true }); return () => { container.removeEventListener(\scroll\, handleScroll); }; }, scrollToBottom: () => { const { bottomRef, autoScrollEnabled } = get(); if (bottomRef.current) { bottomRef.current.scrollIntoView({ behavior: \smooth\, block: \end\ }); if (!autoScrollEnabled) { set({ autoScrollEnabled: true }); } set({ showScrollButton: false }); } }, disableAutoScroll: () => { set({ autoScrollEnabled: false }); }, enableAutoScroll: () => { set({ autoScrollEnabled: true }); }, updateScrollPosition: () => { const container = get().containerRef.current; if (!container) return; const { scrollTop, scrollHeight, clientHeight } = container; const distanceFromBottom = scrollHeight - scrollTop - clientHeight; set({ showScrollButton: distanceFromBottom > 150 }); }, initMobileDetection: () => { const checkIfMobile = () => { set({ isMobile: window.innerWidth < 768 }); }; checkIfMobile(); window.addEventListener(\resize\, checkIfMobile); return () => window.removeEventListener(\resize\, checkIfMobile); } }));
