# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name mfulearnai.mfu.ac.th;

    # Handle ACME challenge for Let's Encrypt if needed
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # This is the cleanest approach. Check the header at the server level.
    # If it's not https, redirect. This handles all cases of proxied or direct HTTP.
    if ($http_x_forwarded_proto != 'https') {
        return 301 https://$host$request_uri;
    }

    # In the rare and misconfigured case that a request with an 'https' proto
    # reaches this port 80 block, we must NOT redirect.
    # We will simply proxy it to the frontend to avoid loops and errors.
    location / {
        proxy_pass http://frontend:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Main server that handles all traffic
server {
    listen 443 ssl http2;
    server_name mfulearnai.mfu.ac.th;

    # SSL Configuration (Update paths as needed)
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Proxy to the backend API
    location /api/ {
        proxy_pass http://backend:5000; # The service name from docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }

    # Proxy to the backend for WebSockets
    location /ws/ {
        proxy_pass http://backend:5001/ws/; # Assuming ws is on a different port or path
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy all other requests to the frontend service
    location / {
        proxy_pass http://frontend:80; # The frontend service now serves on port 80
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}